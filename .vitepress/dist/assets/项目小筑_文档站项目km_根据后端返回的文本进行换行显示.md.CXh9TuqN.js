import{_ as s,c as a,o as i,a5 as t}from"./chunks/framework.DDkfrFQE.js";const n="/palette/assets/image.BwccpaSp.png",e="/palette/assets/image-1.v3UMM_Dj.png",l="/palette/assets/image-2.Ca5H8Ry-.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"项目小筑/文档站项目km/根据后端返回的文本进行换行显示.md","filePath":"项目小筑/文档站项目km/根据后端返回的文本进行换行显示.md"}'),p={name:"项目小筑/文档站项目km/根据后端返回的文本进行换行显示.md"},h=t('<h3 id="一、背景" tabindex="-1">一、背景 <a class="header-anchor" href="#一、背景" aria-label="Permalink to &quot;一、背景&quot;">​</a></h3><blockquote><p>在文档站建设中，评论区会有用户输入换行的段落，但是传到后端再回显到前端后，并不会显示换行。</p></blockquote><p>后端传回一个文本数据： <img src="'+n+'" alt="alt text"> 文本内容就是上面圈着的一部分，内容中包含换行符（↵）.对于这类型的数据，在前端页面是需要进行稍微处理才能正常显示。如果没有经过处理，那么内容是不会在有换行符的位置进行换行显示的： <img src="'+e+'" alt="alt text"> 而正常的显示应该是： <img src="'+l+`" alt="alt text"> 下面两种方法可以实现这种效果：</p><h3 id="二、解决方法" tabindex="-1">二、解决方法 <a class="header-anchor" href="#二、解决方法" aria-label="Permalink to &quot;二、解决方法&quot;">​</a></h3><h4 id="方法一-下面是在-vue-中实现的-但所有框架思想一样" tabindex="-1">方法一(下面是在 Vue 中实现的，但所有框架思想一样) <a class="header-anchor" href="#方法一-下面是在-vue-中实现的-但所有框架思想一样" aria-label="Permalink to &quot;方法一(下面是在 Vue 中实现的，但所有框架思想一样)&quot;">​</a></h4><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">//部分代码：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;commendContent&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commendContent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">//计算属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">computed: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commendContent () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      //this.commend.content是后端传回来的文本数据，就是要对这个数据进行处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      let arr = this.commend.content.split(&quot;&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      return arr.map((item) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        return item === &quot;\\n&quot; ? &quot;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&quot; : item</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }).join(&quot;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p>思想：将文本字符串转化为数组，然后将数组中“\\n”换成浏览器正常解析的换行标签<br>即可。(后端传回来的“↵”就是\\n)，上面同样可以使用正则表达式来将字符串的换行符转换为&lt; br &gt;，那么就不用转换为数组了。</p><h4 id="方法二" tabindex="-1">方法二 <a class="header-anchor" href="#方法二" aria-label="Permalink to &quot;方法二&quot;">​</a></h4><p>给展示内容的容器 div 加上下面这句 CSS 代码即可：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>white-space:pre-line;</span></span>
<span class="line"><span>或</span></span>
<span class="line"><span>white-space:pre-wrap;</span></span></code></pre></div><ul><li><p>white-space CSS 属性是用来设置如何处理元素中的 空白。</p></li><li><p>pre-wrap:连续的空白符会被保留。在遇到换行符或者&lt; br &gt;元素，或者需要为了填充「行框盒子(line boxes)」时才会换行。 pre-line 连续的空白符会被合并。在遇到换行符或者&lt; br &gt;元素，或者需要为了填充「行框盒子(line boxes)」时会换行。</p></li></ul>`,11),r=[h];function k(o,c,E,d,g,_){return i(),a("div",null,r)}const y=s(p,[["render",k]]);export{m as __pageData,y as default};
